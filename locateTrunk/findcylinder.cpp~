#include <pcl/ModelCoefficients.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/passthrough.h>
#include <pcl/features/normal_3d.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/visualization/cloud_viewer.h>
#include <boost/thread/thread.hpp>
#include <math.h>
#include <cmath>
#include <pcl/segmentation/extract_clusters.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/kdtree/kdtree.h>
#include <fstream>
//#indlude <>

using namespace std;

typedef pcl::PointXYZ PointT;

int
main (int argc, char *argv[])
{
  float res_lower; //resolution
  res_lower = atof(argv[1]);
  float res_upper; //resolution
  res_upper = atof(argv[2]);
  //float cutOutBundary;
  //cutOutBundary = atof(argv[3]);
  // All the objects needed
  float trunkradiuslimitlower;
  trunkradiuslimitlower = atof(argv[3]);
  float trunkradiuslimitupper;
  trunkradiuslimitupper = atof(argv[4]);
  pcl::PCDReader reader;
  pcl::NormalEstimation<PointT, pcl::Normal> ne_1;
  pcl::NormalEstimation<PointT, pcl::Normal> ne_2;
  pcl::SACSegmentationFromNormals<PointT, pcl::Normal> seg_1;
  pcl::SACSegmentationFromNormals<PointT, pcl::Normal> seg_2; 
  pcl::PCDWriter writer;
  pcl::ExtractIndices<PointT> extract;
  pcl::ExtractIndices<pcl::Normal> extract_normals;
  pcl::search::KdTree<PointT>::Ptr tree_1 (new pcl::search::KdTree<PointT> ());
  pcl::search::KdTree<PointT>::Ptr tree_2 (new pcl::search::KdTree<PointT> ());
  pcl::search::KdTree<PointT>::Ptr tree_3 (new pcl::search::KdTree<PointT> ());
  pcl::search::KdTree<PointT>::Ptr tree_4 (new pcl::search::KdTree<PointT> ());
  // Datasets
  pcl::PointCloud<PointT>::Ptr cloud (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr rest_cloud_1 (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr rest_cloud_1_filtered (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr rest_cloud_2 (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr rest_cloud_3 (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr rest_cloud_4 (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr layer_cloud (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr cloud_temp_1 (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr cloud_temp_2 (new pcl::PointCloud<PointT>);
  pcl::PointCloud<pcl::Normal>::Ptr cloud_normals_1 (new pcl::PointCloud<pcl::Normal>);
  pcl::PointCloud<pcl::Normal>::Ptr cloud_normals_2 (new pcl::PointCloud<pcl::Normal>);
  pcl::PointCloud<pcl::Normal>::Ptr cloud_normals_3 (new pcl::PointCloud<pcl::Normal>);
  pcl::PointCloud<pcl::Normal>::Ptr cloud_normals_4 (new pcl::PointCloud<pcl::Normal>);
  pcl::ModelCoefficients::Ptr coefficients_cylinder_1 (new pcl::ModelCoefficients);
  pcl::PointIndices::Ptr inliers_cylinder_1 (new pcl::PointIndices);
  pcl::ModelCoefficients::Ptr coefficients_cylinder_2 (new pcl::ModelCoefficients);
  pcl::PointIndices::Ptr inliers_cylinder_2 (new pcl::PointIndices);
  pcl::ModelCoefficients::Ptr coefficients_cylinder_3 (new pcl::ModelCoefficients);
  pcl::PointIndices::Ptr inliers_cylinder_3 (new pcl::PointIndices);
  pcl::ModelCoefficients::Ptr coefficients_cylinder_4 (new pcl::ModelCoefficients);
  pcl::PointIndices::Ptr inliers_cylinder_4 (new pcl::PointIndices);
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr layer_cloud_rgb (new pcl::PointCloud<pcl::PointXYZRGB>);
  pcl::PointCloud<PointT>::Ptr inlier_cloud_1 (new pcl::PointCloud<PointT> ());
  pcl::PointCloud<PointT>::Ptr inlier_cloud_2 (new pcl::PointCloud<PointT> ());
  pcl::PointCloud<PointT>::Ptr inlier_cloud_3 (new pcl::PointCloud<PointT> ());
  pcl::PointCloud<PointT>::Ptr inlier_cloud_4 (new pcl::PointCloud<PointT> ());

  pcl::PointXYZ basic_point;
  pcl::PointXYZRGB point;
  // Read in the cloud data
  reader.read ("rescaleTree/build/tree_scaled.pcd", *cloud);
  std::cerr << "Input PointCloud has: " << cloud->points.size () << " data points." << std::endl;
  // std::cout << "data1-x: " << cloud->points[1].x << std::endl;
  // std::cout << "data1-y: " << cloud->points[1].y << std::endl;
  // std::cout << "data1-z: " << cloud->points[1].z << std::endl;
 
  int j = 0;
  int count = 0;
  int inter_threshhold = 100; //point number threshhold for making next iteration decision
  bool second = false; //indicator of whether second iteration exist
  bool third = false; //indicator of whether third iteration exist
  float cylength = 0.0;
  float temp_length;
  //get z_maz: tree height
  float tree_height;
  //construct color for cloud
  uint8_t r(255), g(15), b(15);
  uint32_t rgb = ((uint32_t)r << 16 | (uint32_t)g << 8 | (uint32_t)b);
  tree_height = cloud->points[1].z;
  for (int i = 0; i < cloud->points.size(); ++i){
    if (cloud->points[i].z > tree_height){
      tree_height = cloud->points[i].z;}}
  //float d = 0.15; //cylinder lay thinkness
  int layer_number = int(ceil(tree_height/(res_upper-res_lower)));

  //for (int l = 0; l < 1; ++l){
    //sift out the cloud in the "l"th layer
  for (int i = 0; i < cloud->points.size(); ++i){
    if (cloud->points[i].z > res_lower && cloud->points[i].z < res_upper){
      count += 1;
      layer_cloud->points.push_back(cloud->points[i]);
      point.x = cloud->points[i].x;
      point.y = cloud->points[i].y;
      point.z = cloud->points[i].z;
      point.rgb = *reinterpret_cast<float*>(&rgb);
      layer_cloud_rgb->points.push_back(point);}}
  layer_cloud->width = count;
  layer_cloud->height = 1;
  layer_cloud->points.resize(count);
  layer_cloud_rgb->width = count;
  layer_cloud_rgb->height = 1;
  layer_cloud_rgb->points.resize(count);

  writer.write ("layer.pcd", *layer_cloud, false);
    
  //----------------------------------------------process 1---------------------
  //RANSAC
  ne_1.setSearchMethod (tree_1);
  ne_1.setInputCloud (layer_cloud);
  ne_1.setKSearch (50);
  ne_1.compute (*cloud_normals_1);

  //Create the segmentation object for cylinder segmentation and set all the parameters
  seg_1.setOptimizeCoefficients (true);
  seg_1.setModelType (pcl::SACMODEL_CYLINDER);
  seg_1.setMethodType (pcl::SAC_RANSAC);
  seg_1.setNormalDistanceWeight (0.1);
  seg_1.setMaxIterations (10000);
  seg_1.setDistanceThreshold (0.05);
  seg_1.setRadiusLimits (trunkradiuslimitlower, trunkradiuslimitupper); //(0, 0.1)//(0.03, )
  //seg_1.setRadiusLimits (0.05, 0.06);
  seg_1.setInputCloud (layer_cloud);
  seg_1.setInputNormals (cloud_normals_1);

  seg_1.segment (*inliers_cylinder_1, *coefficients_cylinder_1);
  //----------------------------------------------process 1---------------------
  // find inlier in this layer
  extract.setInputCloud (layer_cloud);
  extract.setIndices (inliers_cylinder_1);
  extract.setNegative (false);
  extract.filter (*inlier_cloud_1);
 

  extract.setNegative (true);
  extract.filter (*rest_cloud_1);
  extract_normals.setNegative (true);
  extract_normals.setInputCloud (cloud_normals_1);
  extract_normals.setIndices (inliers_cylinder_1);
  extract_normals.filter (*cloud_normals_2);


  
  writer.write ("rest_cloud.pcd", *rest_cloud_1, false);
  
  //find the inliers
  int cter = 0;
  pcl::PointCloud<PointT>::Ptr inliercloud (new pcl::PointCloud<PointT>);
  int flag = 0;
  for (int i = 0; i < layer_cloud->points.size(); ++i){
    for (int j = 0; j < rest_cloud_1->points.size(); ++j){
      if (rest_cloud_1->points[j].x == layer_cloud->points[i].x && rest_cloud_1->points[j].y == layer_cloud->points[i].y && rest_cloud_1->points[j].z == layer_cloud->points[i].z){
	flag = 1;}}
    if (flag == 0){
      cter += 1;
      inliercloud->points.push_back(layer_cloud->points[i]);}
    flag = 0;}
  
  inliercloud->width = cter;
  inliercloud->height = 1;
  inliercloud->points.resize(cter);

  std::stringstream ssss;
  ssss << "cutted_tree_inliers_" << res_lower << "-" <<res_upper << ".pcd";
  writer.write<pcl::PointXYZ> (ssss.str (), *inliercloud, false); //*
  std::cerr<< "in saving cutted tree" << std::endl;

      

  //find the right starting x,y,x of the cylinder model
  //find the loweast z value of the layer cloud
  float layer_cloud_lowest_z;
  layer_cloud_lowest_z = layer_cloud->points[1].z;
  for (int i = 0; i < layer_cloud->points.size(); ++i){
    if (layer_cloud->points[i].z < layer_cloud_lowest_z){
      layer_cloud_lowest_z = layer_cloud->points[i].z;}}
  coefficients_cylinder_1->values[0] += (layer_cloud_lowest_z - coefficients_cylinder_1->values[2]) / coefficients_cylinder_1->values[5] * coefficients_cylinder_1->values[3]; 
  coefficients_cylinder_1->values[1] += (layer_cloud_lowest_z - coefficients_cylinder_1->values[2]) / coefficients_cylinder_1->values[5] * coefficients_cylinder_1->values[4];
  coefficients_cylinder_1->values[2] = layer_cloud_lowest_z;
  if (coefficients_cylinder_1->values[5] < 0){
    coefficients_cylinder_1->values[3] = -1 * coefficients_cylinder_1->values[3];
    coefficients_cylinder_1->values[4] = -1 * coefficients_cylinder_1->values[4];
    coefficients_cylinder_1->values[5] = -1 * coefficients_cylinder_1->values[5];}

  //find the length of the cylinder
  float x0 = coefficients_cylinder_1->values[0];
  float y0 = coefficients_cylinder_1->values[1];
  float z0 = coefficients_cylinder_1->values[2];
  float dx = coefficients_cylinder_1->values[3]; //a
  float dy = coefficients_cylinder_1->values[4]; //b
  float dz = coefficients_cylinder_1->values[5]; //c
  float radus = coefficients_cylinder_1->values[6];
  float t;
  float l_lowest;
  float l_highest;
  float distance;
  t = ((layer_cloud->points[1].x-x0)*dx + (layer_cloud->points[1].y-y0)*dy + (layer_cloud->points[1].z-z0)*dz)/(dx*dx+dy*dy+dz*dz);
  l_lowest = sqrt(pow((x0+dx*t-x0),2)+pow((y0+dy*t-y0),2)+pow((z0+dz*t-z0),2));
  l_highest = sqrt(pow((x0+dx*t-x0),2)+pow((y0+dy*t-y0),2)+pow((z0+dz*t-z0),2));
  for (int i = 0; i < layer_cloud->points.size(); ++i){
    t = ((layer_cloud->points[i].x-x0)*dx + (layer_cloud->points[i].y-y0)*dy + (layer_cloud->points[i].z-z0)*dz)/(dx*dx+dy*dy+dz*dz);
    distance = sqrt(pow((x0+dx*t-x0),2)+pow((y0+dy*t-y0),2)+pow((z0+dz*t-z0),2));
		    
    if (l_lowest > distance){
      l_lowest = distance;}
    if (l_highest < distance){
      l_highest = distance;}
  }
	
    
  //std::cerr << "temp_length: " << temp_length << std::endl;
  cylength = l_highest - l_lowest;
    


  std::cerr << "Cylinder 1 coefficients: " << *coefficients_cylinder_1 << std::endl;
  std::cerr << "Cylinder 1 length: " << cylength << std::endl;
    
  


 

  //color cloud plot
  boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer (new pcl::visualization::PCLVisualizer ("3D Viewer"));
  viewer->setBackgroundColor (0, 0, 0);
  pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgbfield(layer_cloud_rgb);
  viewer->addPointCloud<pcl::PointXYZRGB> (layer_cloud_rgb, rgbfield, "sample cloud");
  // viewer->addPointCloud<pcl::PointXYZ> (inlier_cloud_1, "sample cloud 1");
  // viewer->addPointCloud<pcl::PointXYZ> (rest_cloud_1, "sample cloud 2");
  viewer->setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 3, "sample cloud");
  //viewer->setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 3, "sample cloud 1");
  //viewer->setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 3, "sample cloud 2");
  //viewer->addCoordinateSystem (1.0);
  viewer->initCameraParameters ();
  //return (viewer);


  /*//cut current section outof the tree within a cutOutBundary

  float xp;
  float yp;

  count = 0;
  //float level[9] = {0, 0.25, 0.52, 0.85, 1.2, 1.45, 1.9, 2.0, 2.6};
  //for (int i = 0; i <9; ++i){
  pcl::PointCloud<PointT>::Ptr cloud_org (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr cutted_cloud (new pcl::PointCloud<PointT>);
  reader.read ("tree_org.pcd", *cloud_org);
  for (int i = 0; i < cloud_org->points.size(); ++i){
    if (cloud_org->points[i].z > res_lower && cloud_org->points[i].z < res_upper){
      t = (cloud_org->points[i].z - z0)/dz;
      xp = cloud_org->points[i].x - dx*t;
      yp = cloud_org->points[i].y - dy*t;
      if (pow(xp-x0, 2)+pow(yp-y0, 2) < pow (radus, 2)+ cutOutBundary){
	count += 1;
	cutted_cloud->points.push_back(cloud_org->points[i]);}}}
  cutted_cloud->width = count;
  cutted_cloud->height = 1;
  cutted_cloud->points.resize(count);

  std::stringstream ss;
  ss << "cutted_tree_" << res_lower << "-" <<res_upper << ".pcd";
  writer.write<pcl::PointXYZ> (ss.str (), *cutted_cloud, false); //*
  std::cerr<< "in saving cutted tree" << std::endl;
  */
  
  std::stringstream sss;
  sss << "cutted_tree_" << res_lower << "-" <<res_upper << ".txt";
  std::cout << sss.str() << std::endl;
  std::ofstream myfile;
  myfile.open(sss.str().c_str());
  for (int i = 0; i < 7; ++i){
    myfile << coefficients_cylinder_1->values[i] << "\n";}
  myfile << cylength << "\n";
  myfile.close();
  
    




  //  pcl::visualization::CloudViewer viewer ("Simple Cloud Viewer");
  //viewer.showCloud (cloud_temp);
  viewer->addCylinder(*coefficients_cylinder_1, "cylinder_1");
 

  //viewer->addPointCloudNormals<pcl::PointXYZ, pcl::Normal> (layer_cloud, cloud_normals_1, 10, 0.05, "normals");






  while (!viewer->wasStopped ())
  {
    viewer->spinOnce (100);
    boost::this_thread::sleep (boost::posix_time::microseconds (100000));
  }
  return (0);
}
